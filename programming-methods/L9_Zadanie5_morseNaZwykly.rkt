#lang racket

(define decoding
  (make-hash
   '(("._" . #\a)
   ("_..." . #\b)
   ("_._." . #\c)
   ("_.." . #\d)
   ("." . #\e)
   (".._." . #\f)
   ("__." . #\g)
   ("...." . #\h)
   (".." . #\i)
   (".___" . #\j)
   ("_._" . #\k)
   ("._.." . #\l)
   ("__" . #\m)
   ("_." . #\n)
   ("___" . #\o)
   (".__." . #\p)
   ("__._" . #\q)
   ("._." . #\r)
   ("..." . #\s)
   ("_" . #\t)
   (".._" . #\u)
   ("..._" . #\v)
   (".__" . #\w)
   ("_.._" . #\x)
   ("_.__" . #\y)
   ("__.." . #\z)
   ("_____" . #\0)
   (".____" . #\1)
   ("..___" . #\2)
   ("...__" . #\3)
   ("...._" . #\4)
   ("....." . #\5)
   ("_...." . #\6)
   ("__..." . #\7)
   ("___.." . #\8)
   ("____." . #\9))))


(define (morse-decode input)
  (string-join (map morse-decode-word (regexp-split #rx"  " input)) " "))

(define (morse-decode-word input)
  (list->string
   (map (lambda (x) (hash-ref decoding x))
        (string-split input))))

(morse-decode "__ . _ ___ _.. _.__  .__. ._. ___ __. ._. ._ __ ___ .__ ._ _. .. ._")